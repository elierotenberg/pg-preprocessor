'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

_bluebird2['default'].promisifyAll(_fs2['default']);

var DIRECTIVE_PREFIX = '-- @';

var DIRECTIVE_REGEXP = /^\-\- \@([^ ]*) (.*)$/;

var DECLARE_REGEXP = /^(local|global) ([^ ]*) (.*)$/;

var defaultOpts = {
  basePath: process.cwd(),
  encoding: 'utf8',
  blacklist: []
};

var directives = {};

function startsWith(originString, searchString, position) {
  position = position || 0;
  return originString.indexOf(searchString, position) === position;
}

function resolveWithoutExt(opts, _ref, path) {
  var entry = _ref.entry;

  if (startsWith(path, '.')) {
    var _p$parse = _path2['default'].parse(entry);

    var dir = _p$parse.dir;

    return _path2['default'].resolve(dir, path);
  }
  return _path2['default'].resolve(opts.basePath, path);
}

function resolve(opts, _ref2, path) {
  var entry = _ref2.entry;

  var pathWithoutExt = resolveWithoutExt(opts, { entry: entry }, path);
  if (_path2['default'].extname(pathWithoutExt) === '') {
    return pathWithoutExt + '.sql';
  }
  return pathWithoutExt;
}

function escapeRegExp(string) {
  return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
}

function replaceAll(string, original, replaced) {
  return string.replace(new RegExp(escapeRegExp(original), 'g'), replaced);
}

function processNextDirective(opts, state) {
  var linesAlreadyProcessed = state.linesAlreadyProcessed;
  var linesToProcess = state.linesToProcess;

  var indexOfFirstDirective = _lodash2['default'].findIndex(linesToProcess, function (line) {
    return startsWith(line, DIRECTIVE_PREFIX);
  });
  if (indexOfFirstDirective === -1) {
    _lodash2['default'].each(linesToProcess, function (line) {
      return linesAlreadyProcessed.push(line);
    });
    return linesAlreadyProcessed;
  }
  var firstDirective = linesToProcess[indexOfFirstDirective];
  var linesToIgnore = _lodash2['default'].slice(linesToProcess, 0, indexOfFirstDirective);
  var nextLinesToProcess = _lodash2['default'].slice(linesToProcess, indexOfFirstDirective);
  var params = firstDirective.match(DIRECTIVE_REGEXP);
  if (params === null) {
    throw new Error('Unrecognized directive in ' + state.entry + ': ' + firstDirective);
  }
  var directiveName = params[1];
  var directiveArgs = params[2];

  if (!_lodash2['default'].has(directives, directiveName)) {
    throw new Error('Unknown directive in ' + state.entry + ': ' + directiveName);
  }
  if (_lodash2['default'].includes(opts.blacklist, directiveName)) {
    return directives._noop(opts, state);
  }
  _lodash2['default'].each(linesToIgnore, function (line) {
    return linesAlreadyProcessed.push(line);
  });
  state.linesToProcess = nextLinesToProcess;
  return directives[directiveName](opts, state, directiveArgs);
}

function processSingleFile(opts, state) {
  var entry = state.entry;
  var globalDecls = state.globalDecls;
  var localDecls = state.localDecls;

  return _fs2['default'].readFileAsync(entry).then(function (contents) {
    var decls = _Object$assign({}, globalDecls, localDecls);
    var linesToProcess = _lodash2['default'].reduce(decls, function (current, expr, identifier) {
      return replaceAll(current, expr, identifier);
    }, replaceAll(contents.toString(opts.encoding), '\r\n', '\n')).split('\n');
    return processNextDirective(opts, _Object$assign(state, { linesAlreadyProcessed: [], linesToProcess: linesToProcess }));
  });
}

_Object$assign(directives, {
  _noop: function _noop(opts, state) {
    var linesAlreadyProcessed = state.linesAlreadyProcessed;
    var linesToProcess = state.linesToProcess;

    linesAlreadyProcessed.push(linesToProcess.shift());
    return processNextDirective(opts, _Object$assign(state, { linesAlreadyProcessed: linesAlreadyProcessed, linesToProcess: linesToProcess }));
  },

  require: function require(opts, state, path) {
    var alreadyRequired = state.alreadyRequired;
    var globalDecls = state.globalDecls;
    var includeStack = state.includeStack;

    var childEntry = resolve(opts, state, path);
    if (_lodash2['default'].has(alreadyRequired, childEntry)) {
      var linesAlreadyProcessed = state.linesAlreadyProcessed;
      var linesToProcess = state.linesToProcess;

      linesToProcess.shift();
      linesAlreadyProcessed.push('-- REQUIRE ALREADY REQUIRED ' + path);
      return processNextDirective(opts, _Object$assign(state, { linesAlreadyProcessed: linesAlreadyProcessed, linesToProcess: linesToProcess }));
    }
    alreadyRequired[childEntry] = true;
    var childIncludeStack = _lodash2['default'].clone(includeStack);
    var childGlobalDecls = _lodash2['default'].clone(globalDecls);
    childIncludeStack.push(childEntry);
    var childState = {
      entry: childEntry,
      linesToProcess: null,
      linesAlreadyProcessed: null,
      localDecls: {},
      globalDecls: childGlobalDecls,
      alreadyRequired: alreadyRequired,
      includeStack: childIncludeStack
    };
    return processSingleFile(opts, childState).then(function (childLines) {
      alreadyRequired[childEntry] = childLines;
      var linesAlreadyProcessed = state.linesAlreadyProcessed;
      var linesToProcess = state.linesToProcess;

      linesToProcess.shift();
      linesAlreadyProcessed.push('-- REQUIRE BEGIN ' + path);
      _lodash2['default'].each(childLines, function (line) {
        return linesAlreadyProcessed.push(line);
      });
      var newGlobalDecls = {};
      _lodash2['default'].each(childGlobalDecls, function (expr, identifier) {
        if (!_lodash2['default'].has(globalDecls, identifier)) {
          newGlobalDecls[identifier] = expr;
        }
      });
      _lodash2['default'].each(linesToProcess, function (line, k) {
        return _lodash2['default'].each(newGlobalDecls, function (expr, identifier) {
          return linesToProcess[k] = replaceAll(linesToProcess[k], identifier, expr);
        });
      });
      linesAlreadyProcessed.push('-- REQUIRE END ' + path);
      return processNextDirective(opts, _Object$assign(state, { linesAlreadyProcessed: linesAlreadyProcessed, linesToProcess: linesToProcess }));
    });
  },

  include: function include(opts, state, path) {
    var globalDecls = state.globalDecls;
    var alreadyRequired = state.alreadyRequired;
    var includeStack = state.includeStack;

    var childEntry = resolve(opts, state, path);
    if (_lodash2['default'].includes(includeStack, childEntry)) {
      throw new Error('Cyclic include is not allowed: ' + path);
    }
    var childIncludeStack = _lodash2['default'].clone(includeStack);
    childIncludeStack.push(childEntry);
    var childState = {
      entry: childEntry,
      linesToProcess: null,
      linesAlreadyProcessed: null,
      localDecls: {},
      globalDecls: globalDecls,
      alreadyRequired: alreadyRequired,
      includeStack: childIncludeStack
    };
    return processSingleFile(opts, childState).then(function (childLines) {
      console.warn({ childLines: childLines });
      var linesAlreadyProcessed = state.linesAlreadyProcessed;
      var linesToProcess = state.linesToProcess;

      linesToProcess.shift();
      linesAlreadyProcessed.push('-- INCLUDE BEGIN ' + childEntry);
      _lodash2['default'].each(childLines, function (line) {
        return linesAlreadyProcessed.push(line);
      });
      linesAlreadyProcessed.push('-- INCLUDE END ' + childEntry);
      return processNextDirective(opts, _Object$assign(state, { linesAlreadyProcessed: linesAlreadyProcessed, linesToProcess: linesToProcess }));
    });
  },

  declare: function declare(opts, state, args) {
    var match = args.match(DECLARE_REGEXP);
    if (match === null) {
      throw new Error('Unrecognized declare: ' + args);
    }
    var localOrGlobal = match[1];
    var identifier = match[2];
    var expr = match[3];

    if (localOrGlobal === 'local') {
      state.localDecls[identifier] = expr;
    }
    if (localOrGlobal === 'global') {
      state.globalDecls[identifier] = expr;
    }
    var linesAlreadyProcessed = state.linesAlreadyProcessed;
    var linesToProcess = state.linesToProcess;

    linesAlreadyProcessed.push(linesToProcess.shift());
    _lodash2['default'].each(linesToProcess, function (line, k) {
      return linesToProcess[k] = replaceAll(line, identifier, expr);
    });
    return processNextDirective(opts, _Object$assign(state, { linesAlreadyProcessed: linesAlreadyProcessed, linesToProcess: linesToProcess }));
  }
});

function processDirectives(opts, entry) {
  _lodash2['default'].defaults(opts, defaultOpts);
  var state = {
    entry: entry,
    linesToProcess: null,
    linesAlreadyProcessed: null,
    localDecls: {},
    globalDecls: {},
    alreadyRequired: {},
    includeStack: [entry]
  };
  return processSingleFile(opts, state).then(function (lines) {
    return lines.join('\n');
  });
}

exports['default'] = processDirectives;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,
